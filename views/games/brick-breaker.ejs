<script language="javascript" >
	<% include ../games/model.js %>
	<% include ../games/controller.js %>
</script>
<script type="text/babel">
	class Button extends React.Component {
		constructor(props) {
			super(props);
		}

		render(props) {
			return (
				<button onClick={this.props.clickHandler} > {this.props.value}
				</button>
			);
		}
	}

	class Instructions extends React.Component {
		constructor(props) {
			super(props);
		}

		render() {
			return (
				<div>
					<center>
						<table>
							<tbody>
								<tr>
									<td>
										<h1>How to play: </h1>
										Left Arrow Key: To move left
										<br/>
										Right Arrow Key: To move right
										<br/>
										'b': To release ball
									</td>
								</tr>
							</tbody>
						</table>
					</center>
				</div>
			);
		}
	}

	class GameCanvas extends React.Component {
		constructor(props) {
			super(props);
		}
		render(props){
			return (
				<canvas id="stage" width="800" height="800" style={{border:"1px solid black"}} >
				</canvas>
			);
		}
	}

	class PlayView extends React.Component {
		constructor(props) {
			super(props);
		}

		render() {
			return (
				<center>
					<table>
						<tbody>
							<tr>
								<td>
									<center>
										<h1>Welcome to KT Brick Breaker!</h1>
									</center>
									<GameCanvas />
								</td>
								<td>
									<Button clickHandler={this.props.playButtonHandler} value="Play" />
								</td>
								<td>
									<Button clickHandler={this.props.quitButtonHandler} value="Quit" />
								</td>
							</tr>
							<tr>
								<td>
									<Instructions />
								</td>
							</tr>
						</tbody>
					</table>
				</center>
			);
		}
	}

	class ControlView extends React.Component {
		constructor(props) {
			super(props);
		}

		render() {
			return (
				<center>
					<h1>Welcome to KT Brick Breaker!</h1>
					<h2>Controls</h2>
					<table>
						<tbody>
							<tr>
								<td>
									<Instructions />
								</td>
							</tr>
							<tr>
								<td>
									<Button clickHandler={this.props.backButtonHandler} value="Back" />
								</td>
							</tr>
						</tbody>
					</table>
				</center>
			);
		}
	}

	class LeaderboardView extends React.Component {
		constructor(props) {
			super(props);
		}

		render() {
			return (
				<center>
					<h1>Welcome to KT Brick Breaker!</h1>
					<h2>Leaderboards</h2>
					<table>
						<tbody>
							<tr>
								<td>
									<Button clickHandler={this.props.backButtonHandler} value="Back" />
								</td>
							</tr>
						</tbody>
					</table>
				</center>
			);
		}
	}

	class HomeView extends React.Component {
		constructor(props) {
			super(props);
		}

		render() {
			return (
				<center>
					<h1>Welcome to KT Brick Breaker!</h1>
					<br/>
					<table>
						<tbody>
							<tr>
								<td>
									<Button clickHandler={this.props.playButtonHandler} value="Play" />
								</td>
							</tr>
							<tr>
								<td>
									<Button clickHandler={this.props.controlButtonHandler} value="Controls" />
								</td>
							</tr>
							<tr>
								<td>
									<Button clickHandler={this.props.leaderboardButtonHandler} value="Leaderboards" />
								</td>
							</tr>
						</tbody>
					</table>
				</center>
			);
		}
	}

	class ViewComponent extends React.Component {
		constructor(props) {
			super(props);
			this.state = {
				"currentView": "HomeView"
			}
			this.playButtonClickHandler = this.playButtonClickHandler.bind(this);
			this.pauseButtonClickHandler = this.pauseButtonClickHandler.bind(this);
			this.quitButtonClickHandler = this.quitButtonClickHandler.bind(this);
			this.backButtonClickHandler = this.backButtonClickHandler.bind(this);
			this.controlButtonClickHandler = this.controlButtonClickHandler.bind(this);
			this.leaderboardButtonClickHandler = this.leaderboardButtonClickHandler.bind(this);
		}

		playButtonClickHandler(e) {
			this.setState( (prevState, props) => {
				return { "currentView": "PlayView" };
			});

			let promise = new Promise(resolve => setTimeout(resolve, 10));
			promise.then(() => {
				if (!isGameActive()){
					setupGame();
				}
				startGame();
			});
		}

		pauseButtonClickHandler(e) {
			pauseGame();
		}

		quitButtonClickHandler(e) {
			pauseGame();
			this.setState( (prevState, props) => {
				return { "currentView": "HomeView" };
			});
		}

		backButtonClickHandler(e) {
			this.setState( (prevState, props) => {
				return { "currentView": "HomeView" };
			});
		}

		controlButtonClickHandler(e) {
			this.setState( (prevState, props) => {
				return { "currentView": "ControlView" };
			});
		}

		leaderboardButtonClickHandler(e) {
			this.setState( (prevState, props) => {
				return { "currentView": "LeaderboardView" };
			});
		}

		render() {
			if (this.state.currentView == "PlayView") {
				return (
					<PlayView playButtonHandler={this.playButtonClickHandler} quitButtonHandler={this.quitButtonClickHandler} />
				);
			} else if (this.state.currentView == "ControlView") {
				return (
					<ControlView backButtonHandler={this.backButtonClickHandler} />
				);
			} else if (this.state.currentView == "LeaderboardView") {
				return (
					<LeaderboardView backButtonHandler={this.backButtonClickHandler} />
				);
			} else {
				return (
					<HomeView playButtonHandler={this.playButtonClickHandler} controlButtonHandler={this.controlButtonClickHandler} leaderboardButtonHandler={this.leaderboardButtonClickHandler} />
				);
			}
			
		}
	}

	ReactDOM.render( <ViewComponent />,
	document.getElementById("interface")
    );
</script>